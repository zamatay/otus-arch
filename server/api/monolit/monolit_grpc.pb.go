// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.0
// source: proto/monolit.proto

package monolit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OtusMonolit_HealthCheck_FullMethodName = "/balances.OtusMonolit/HealthCheck"
)

// OtusMonolitClient is the client API for OtusMonolit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OtusMonolitClient interface {
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type otusMonolitClient struct {
	cc grpc.ClientConnInterface
}

func NewOtusMonolitClient(cc grpc.ClientConnInterface) OtusMonolitClient {
	return &otusMonolitClient{cc}
}

func (c *otusMonolitClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OtusMonolit_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OtusMonolitServer is the server API for OtusMonolit service.
// All implementations must embed UnimplementedOtusMonolitServer
// for forward compatibility
type OtusMonolitServer interface {
	HealthCheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedOtusMonolitServer()
}

// UnimplementedOtusMonolitServer must be embedded to have forward compatible implementations.
type UnimplementedOtusMonolitServer struct {
}

func (UnimplementedOtusMonolitServer) HealthCheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedOtusMonolitServer) mustEmbedUnimplementedOtusMonolitServer() {}

// UnsafeOtusMonolitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OtusMonolitServer will
// result in compilation errors.
type UnsafeOtusMonolitServer interface {
	mustEmbedUnimplementedOtusMonolitServer()
}

func RegisterOtusMonolitServer(s grpc.ServiceRegistrar, srv OtusMonolitServer) {
	s.RegisterService(&OtusMonolit_ServiceDesc, srv)
}

func _OtusMonolit_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtusMonolitServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtusMonolit_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtusMonolitServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// OtusMonolit_ServiceDesc is the grpc.ServiceDesc for OtusMonolit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OtusMonolit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "balances.OtusMonolit",
	HandlerType: (*OtusMonolitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _OtusMonolit_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/monolit.proto",
}
