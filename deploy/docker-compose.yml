version: '3.8'

services:
  db:
    container_name: pg-1
    image: docker.io/bitnami/postgresql-repmgr:17
    user: "1001"
    ports:
      - "6432:5432"
    volumes:
      - ../pg_1_data:/bitnami/postgresql
      - ./create_extensions.sql:/docker-entrypoint-initdb.d/create_extensions.sql:ro
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=adminpostgres
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=postgres
      - POSTGRESQL_DATABASE=facebook
      - REPMGR_PASSWORD=repmgrpassword
      - REPMGR_PRIMARY_HOST=pg-1
      - REPMGR_PRIMARY_PORT=5432
      - REPMGR_PARTNER_NODES=pg-1,pg-2,pg-3:5432
      - REPMGR_PORT_NUMBER=5432
      - REPMGR_CONNECT_TIMEOUT=1
      - REPMGR_RECONNECT_ATTEMPTS=2
      - REPMGR_RECONNECT_INTERVAL=1
      - REPMGR_MASTER_RESPONSE_TIMEOUT=5
      - REPMGR_NODE_NAME=pg-1
      - REPMGR_NODE_NETWORK_NAME=pg-1
    restart: unless-stopped
    networks:
      - postgres-ha
  pg-2:
    container_name: postgres_2
    image: docker.io/bitnami/postgresql-repmgr:17
    user: "1001"
    ports:
      - "6433:5432"
    volumes:
      - ../pg_2_data:/bitnami/postgresql
      - ./create_extensions.sql:/docker-entrypoint-initdb.d/create_extensions.sql:ro
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=adminpgpwd4habr
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=postgres
      - POSTGRESQL_DATABASE=facebook
      - REPMGR_PASSWORD=repmgrpassword
      - REPMGR_PRIMARY_HOST=pg-1
      - REPMGR_PRIMARY_PORT=5432
      - REPMGR_PARTNER_NODES=pg-1,pg-2,pg-3:5432
      - REPMGR_PORT_NUMBER=5432
      - REPMGR_CONNECT_TIMEOUT=1
      - REPMGR_RECONNECT_ATTEMPTS=2
      - REPMGR_RECONNECT_INTERVAL=1
      - REPMGR_MASTER_RESPONSE_TIMEOUT=5
      - REPMGR_NODE_NAME=pg-2
      - REPMGR_NODE_NETWORK_NAME=pg-2
    restart: unless-stopped
    networks:
      - postgres-ha
  pg-3:
    container_name: postgres_3
    image: docker.io/bitnami/postgresql-repmgr:17
    user: "1001"
    ports:
      - "6434:5432"
    volumes:
      - ../pg_3_data:/bitnami/postgresql
      - ./create_extensions.sql:/docker-entrypoint-initdb.d/create_extensions.sql:ro
    environment:
      - POSTGRESQL_POSTGRES_PASSWORD=adminpgpwd4habr
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRESQL_DATABASE=facebook
      - REPMGR_PASSWORD=repmgrpassword
      - REPMGR_PRIMARY_HOST=pg-1
      - REPMGR_PRIMARY_PORT=5432
      - REPMGR_PARTNER_NODES=pg-1,pg-2,pg-3:5432
      - REPMGR_NODE_NAME=pg-3
      - REPMGR_NODE_NETWORK_NAME=pg-3
      - REPMGR_PORT_NUMBER=5432
      - REPMGR_CONNECT_TIMEOUT=1
      - REPMGR_RECONNECT_ATTEMPTS=2
      - REPMGR_RECONNECT_INTERVAL=1
      - REPMGR_MASTER_RESPONSE_TIMEOUT=5
    restart: unless-stopped
    networks:
      - postgres-ha

  master:
    container_name: "${COMPOSE_PROJECT_NAME:-citus}_master"
    image: "citusdata/citus:13.0.3"
    ports: [ "${COORDINATOR_EXTERNAL_PORT:-7432}:5432" ]
    labels: [ "com.citusdata.role=Master" ]
    environment: &AUTH
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB:-facebook}"
      PGUSER: "${POSTGRES_USER:-postgres}"
      PGPASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_HOST_AUTH_METHOD: "${POSTGRES_HOST_AUTH_METHOD:-trust}"
    volumes:
      - ./pg.conf:/etc/postgresql/postgresql.conf
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]

  worker:
    image: "citusdata/citus:13.0.3"
    labels: [ "com.citusdata.role=Worker" ]
    depends_on: [ manager ]
    environment: *AUTH
    command: ["/wait-for-manager.sh", "postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    volumes:
      - healthcheck-volume:/healthcheck
      - ./pg.conf:/etc/postgresql/postgresql.conf
  manager:
    container_name: "${COMPOSE_PROJECT_NAME:-citus}_manager"
    image: "citusdata/membership-manager:0.3.0"
    volumes:
      - "${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock"
      - healthcheck-volume:/healthcheck
    depends_on: [ master ]
    environment: *AUTH

  
  redis:
    image: redis:7.2-alpine
#    image: valkey/valkey:8.1
    container_name: production_redis
    ports:
      - "6389:6379"
    environment:
      - REDIS_PASSWORD=redis
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: redis-insight
    ports:
      - "8001:8001"
    networks:
      - redis-net
    depends_on:
      - redis
    volumes:
      - redis_insight_data:/db
  app:
    build:
      context: ./../server
      dockerfile: ./../deploy/app/Dockerfile
    container_name: app_deploy
    ports:
      - "8081:80"
    depends_on:
      - db
      - pg-2
      - pg-3
      - redis
      - kafka
    volumes:
      - ../server/monolit/config.yaml.deploy:/api/config.yaml
  migration:
    build:
      context: ./../server
      dockerfile: ./../deploy/migrate/Dockerfile
    container_name: migration_deploy
    depends_on:
      - db
    volumes:
      - ../server/monolit/config.yaml.deploy:/api/config.yaml
  consumer:
    build:
      context: ./../server
      dockerfile: ./../deploy/consumer/Dockerfile
    container_name: consumer_deploy
    depends_on:
      - db
    volumes:
      - ../server/monolit/config.yaml.deploy:/api/config.yaml

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"  # Для внешнего доступа
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
  kafdrop:
    image: obsidiandynamics/kafdrop:3.30.0
    container_name: kafdrop
    depends_on:
      - kafka
    ports:
      - "9000:9000"  # Web-интерфейс
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"  # Внутренний адрес Kafka
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXT_PATH: "/"
      

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ../prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    ports:
      - '4000:3000'
    volumes:
      - grafana:/var/lib/grafana
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com  # Email для входа в pgAdmin
      PGADMIN_DEFAULT_PASSWORD: admin            # Пароль для входа в pgAdmin
    ports:
      - "8090:80"                               # Проброс порта
    depends_on:
      - db                                      # Зависимость от сервиса PostgreSQL
volumes:
  grafana:
  pg_1_data:
  pg_2_data:
  pg_3_data:
  healthcheck-volume:
  redis_insight_data:
networks:
  postgres-ha:
    driver: bridge
  redis-net:
    driver: bridge
