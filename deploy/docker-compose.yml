version: '3.8'

services:
  db:
    image: postgres:latest
    container_name: postgres_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: facebook
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"                     # Проброс порта
    volumes:
      - ../data:/var/lib/postgresql/data
    networks:
      - postgres-network
    command: >
      -c wal_level=replica
      -c max_wal_senders=5
      -c wal_keep_size=1GB
      -c archive_mode=on
      -c archive_command='test ! -f /var/lib/postgresql/data/archive/%f && cp %p /var/lib/postgresql/data/archive/%f'

  postgres-slave1:
    image: postgres:latest
    container_name: postgres-slave1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: facebook
    volumes:
      - ../slave1-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - postgres-network
    depends_on:
      - db
    command: >
      -c hot_standby=on
      -c primary_conninfo='host=postgres_db port=5432 user=postgres password=postgres'
      -c restore_command='cp /var/lib/postgresql/data/archive/%f %p'
      -c archive_cleanup_command='pg_archivecleanup /var/lib/postgresql/data/archive %r'
  postgres-slave2:
    image: postgres:latest
    container_name: postgres-slave2
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: facebook
    volumes:
      - ./slave2-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - postgres-network
    depends_on:
      - db
    command: >
      -c hot_standby=on
      -c primary_conninfo='host=postgres_db port=5432 user=postgres password=postgres'
      -c restore_command='cp /var/lib/postgresql/data/archive/%f %p'
      -c archive_cleanup_command='pg_archivecleanup /var/lib/postgresql/data/archive %r'

  app:
    build:
      context: ./../server
      dockerfile: ./../deploy/app/Dockerfile
    container_name: app_deploy
    ports:
      - "8081:80"
    depends_on:
      - db
    volumes:
      - ../server/config.yaml.deploy:/api/config.yaml
  migration:
    build:
      context: ./../server
      dockerfile: ./../deploy/migrate/Dockerfile
    container_name: migration_deploy
    depends_on:
      - db
    volumes:
      - ../server/config.yaml.deploy:/api/config.yaml

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ../prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    ports:
      - '4000:3000'
    volumes:
      - grafana:/var/lib/grafana

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com  # Email для входа в pgAdmin
      PGADMIN_DEFAULT_PASSWORD: admin            # Пароль для входа в pgAdmin
    ports:
      - "8090:80"                               # Проброс порта
    depends_on:
      - db                                      # Зависимость от сервиса PostgreSQL
volumes:
  grafana:
networks:
  postgres-network:
    driver: bridge